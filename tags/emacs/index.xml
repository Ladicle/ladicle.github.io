<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>emacs on Ladicle</title><link>https://ladicle.com/tags/emacs/</link><description>Recent content in emacs on Ladicle</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 22 Jan 2021 22:13:55 +0900</lastBuildDate><atom:link href="https://ladicle.com/tags/emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>org-captureのテンプレート ver. 2021</title><link>https://ladicle.com/post/20210120_105729/</link><pubDate>Fri, 22 Jan 2021 22:13:55 +0900</pubDate><guid>https://ladicle.com/post/20210120_105729/</guid><description>かつてのorg-rememberとか、org-captureに移行してスグぐらいの頃は機能足りなかったせいか書き換えることが多かったけど、最近はテンプレートも安定してきた。
個人メモは1ファイルに書き連ねていくよりも org-journal で日々書き捨て、読み返したいものだけ(個人&amp;amp;パブリック)ブログにエクスポート方式の相性が良かったので、org-capture templateもその日のjournalに吐き出すものが多い。
(defun ladicle/get-today-diary () (concat org-journal-dir (format-time-string &amp;#34;%Y%m%d.org&amp;#34; (current-time)))) (setq org-capture-templates &amp;#39;((&amp;#34;t&amp;#34; &amp;#34;Write down the thoughts of this moment with a timestamp.&amp;#34; entry (file+headline ladicle/get-today-diary &amp;#34;Log&amp;#34;) &amp;#34;* %T %^{Tweet}&amp;#34; :immediate-finish t) (&amp;#34;e&amp;#34; &amp;#34;Add event to the today&amp;#39;s journal file.&amp;#34; entry (file+headline ladicle/get-today-diary &amp;#34;Events&amp;#34;) &amp;#34;* %^T %^{Title}&amp;#34; :immediate-finish t) (&amp;#34;h&amp;#34; &amp;#34;Create a private blog post to the today&amp;#39;s journal file.&amp;#34; entry (file+headline ladicle/get-today-diary &amp;#34;Memo&amp;#34;) &amp;#34;%[~/Dropbox/org/capture_templates/hugo_post.org]&amp;#34; :jump-to-captured t) (&amp;#34;i&amp;#34; &amp;#34;Add a task to inbox.</description></item><item><title>DAPとdlvでデバッグする</title><link>https://ladicle.com/post/20200531_142049/</link><pubDate>Sat, 11 Jul 2020 23:24:04 +0900</pubDate><guid>https://ladicle.com/post/20200531_142049/</guid><description>LSPについての記事は多いがDAPについての記事が少ないのでまとめておく。 delveコマンドのほうができることは多いが、気軽に起動したいときにはエディタからの方が楽に操作できる。 (dap-modeのGo担当なので何かあれば連絡して欲しい。)</description></item><item><title>独自URL Schemeの追加と、そのハンドラの実装</title><link>https://ladicle.com/post/20200627_182059/</link><pubDate>Sun, 28 Jun 2020 14:08:10 +0900</pubDate><guid>https://ladicle.com/post/20200627_182059/</guid><description>Table of Contents 独自URL Schemeの追加 TIPS Macアプリの簡単なアイコン変更方法 go-scheme-handlerの実装 独自Scheme利用した編集ボタンをつける TIPS Chromeの確認ダイアログを初回のみ表示させる URLには https:// Schemeを利用することが多いが、 mailto: file: のように他にもいろいろなScheme1がある。 また、macOS標準のScheme以外にも独自URL Schemeを追加するアプリケーションも存在する(e.g. org-protocol:)2。 では、これらアプリケーションはどのように登録しているのだろうか?
独自URL Schemeの追加 Figure 1: 独自Schemeを利用したブログの編集ボタン
独自URL Schemeは、Script Editorで作成したApplicationを適宜変更していくと楽に追加できる。 また、URLのハンドリング部分を全てAppleScriptで書いてもいいが、慣れていないので今後のメンテナンスを考えGoで実装したhandlerを呼び出すことにした。
ここでは例として、 go://journal/&amp;lt;date&amp;gt; 形式のリンクを踏むと該当する日記をEmacsで開くものを実装する。 まずはScriptEditorを起動して新規ファイルを作成し、ドキュメント3見つつCode 1のスクリプトを書いた。
on gohandler(input) do shell script &amp;#34;/Applications/GoHandler.app/Contents/MacOS/bin/go-scheme-handler &amp;#34; &amp;amp; (quoted form of input) end gohandler on open location input gohandler(input) end open location display dialog &amp;#34;GoHandler handles URL with the `go:` scheme :)&amp;#34; Code 1: go://.</description></item><item><title>コードリーティングの記録とOrg Capture</title><link>https://ladicle.com/post/20200625_123915/</link><pubDate>Thu, 25 Jun 2020 21:37:29 +0900</pubDate><guid>https://ladicle.com/post/20200625_123915/</guid><description>Table of Contents org-captureで楽をする 各種ソースコードホスティングサービスのリンクを取得 他の人にシュッと共有する 人間忘れるものなので、コードリーディングする時はorg-modeでメモをとっている。 このメモを取る時なのだけど、単純に文章だけだと後から追いづらい。 なので、気になった箇所は文章と共にファイルリンク1とGitHubへのリンクもセットで記録している。
Code Reading コードリーディングについては &amp;ldquo;Code Reading―オープンソースから学ぶソフトウェア開発技法&amp;rdquo; がおすすめ。 今でこそ慣れたが、はじめはOpenStackとかKubernetesとか大規模なソースコードを読むのに苦戦した。 感覚で改善してしまったが、この本ではその普段何となくやっていたことがうまく言語化されている点が良かった。
org-captureで楽をする メモと共にリンクを記録しているといったが、流石にファイルパス・行番号・コミットハッシュ・GitHubリンクを手動で調べて挿入するのでは面倒すぎる。 そこで、org-captureを使ってカーソル位置の情報をメモ帳の指定した位置に挿入している。
Your browser does not support the video tag. Video 1: org-captureでコードのリンクをメモに挿入する例 実際の設定はこんな感じ。org-captureの (function) オプションを利用して書き込み先のバッファとカーソル位置を選択、 書き込み先のサブツリーは事前に (org-code-capture--store-here) でマークしておく。
ファイルリンクをコメントアウトしているのは、外部に公開するときはローカルのファイルパスを公開しても意味がないため。 ローカルではコメントアウトされたリンクでもジャンプできるので問題なし。
(defconst ladicle/org-journal-dir &amp;#34;~/Dropbox/org/journal/&amp;#34;) (defconst ladicle/org-journal-file-format (concat ladicle/org-journal-dir &amp;#34;%Y%m%d.org&amp;#34;)) (defvar org-code-capture--store-file &amp;#34;&amp;#34;) (defvar org-code-capture--store-header &amp;#34;&amp;#34;) ;; This function is used in combination with a coding template of org-capture. (defun org-code-capture--store-here () &amp;#34;Register current subtree as a capture point.</description></item><item><title>iPadで作図しMacでいい感じにメモる</title><link>https://ladicle.com/post/20200617_130952/</link><pubDate>Fri, 12 Jun 2020 08:40:00 +0900</pubDate><guid>https://ladicle.com/post/20200617_130952/</guid><description>Table of Contents 今までの連携方法 Catalinaの機能を利用した連携 Notes以外でも連携したい 実際の設定 既存の図にチョイ足しする コード書いたり読んだりするのはMacでやったほうが楽だし、図を書いたりするのはiPadが楽。ということでこの間をいい感じに繋いだ話。
今までの連携方法 今までは以下の手順で連携していた。それなりに面倒なので、気軽に図を書いて差し込むという気になれなかった。
iPadのPaperというアプリで図を書く ShareからAirDropを使ってファイルを転送 (ほとんどの場合キャンバスサイズいっぱいに図を書かないので)Previewで画像の切り出し メモ先(Emacs)にドラッグ&amp;amp;ドロップ Catalinaの機能を利用した連携 macOS CatalinaからMacとiPadを連携させるSidecarと共に、MacとiOS1を連携するいくつかの便利機能が入った。 いずれもMac側から実行するとiPadのアプリが自動で起動する。そしてiPad側で編集が完了すると、Mac側にその結果が反映されるという動き。
NotesへiPadから写真/ドキュメント/図/を挿入 公式メモアプリのNotes2で 右クリック &amp;gt; insert from iPhone or iPad &amp;gt; Take Photo/Scan Document/Add sketch 画像/PDFにiPadで書き込み Finderから画像/PDFを 右クリック &amp;gt; Quick Action &amp;gt; Markup Notes以外でも連携したい Figure 1: Integration Flow
公式の機能も便利なんだけど、Notesだけだとコードのシンタックスハイライトとか機能が無さすぎるので常用できない。(つまりEmacs org-mode3つかいたい) また、iPadでの作図もPaper4というアプリが使いやすいのでこれを使いたい。何か良い方法がないかと考えていると、Appleデバイス間のクリップボード同期機能 を思い出した。
クリップボードを利用すれば、アプリケーションに縛られることなくiPad&amp;lt;-&amp;gt;Mac間で連携できる。非常に便利5。
iPadのPaperで図を書く ShareからCopyを選択 MacのEmacsでペースト(ペースト時にhookして画像のみ書き込み部分をCrop) 実際の設定 Clipboardから画像を生成するところはpngpaste6、そして画像の余白自動切り抜きはImageMagicのmogrifyを利用している。 メイン処理自体はShellScriptなのでどのエディタからも同じように利用できるはずだ。
(defun org-insert-clipboard-image () &amp;#34;Generate png file from a clipboard image and insert a link with caption and org-download tag to current buffer.</description></item><item><title>ox-Hugo Cheat Sheet</title><link>https://ladicle.com/post/ox-hugo-cheat/</link><pubDate>Wed, 16 Jan 2019 14:51:27 +0900</pubDate><guid>https://ladicle.com/post/ox-hugo-cheat/</guid><description>Table of Contents 1 図、表、コードの導入と参照 1.1 図のAMP対応 1.2 Chromaによるシンタックスハイライト 2 Subtreeのプロパティと各種機能 [50%] 2.1 TODO DraftフラグをTODOタグで切り替える 2.2 DONE プロパティによる目次とHUGOの制御 3 文字スタイルとHTML 3.1 Markdownに変換されるスタイル一覧 3.2 引用する 3.3 HTMLの制御とNoteブロックの追加 3.4 リスト一覧 4 LaTex数式を埋め込む 5 org-babelによるコードブロックの評価 5.1 Graphviz, PlantUML, ditaaを使ったの出力 5.2 R x ggplot2 によるSVG形式のグラフ出力 6 参考文献 1 図、表、コードの導入と参照 画像や、テーブルはキャプションを付けたり、Code 1のように参照することができる。参照したい名前を #+NAME: &amp;lt;name&amp;gt; に設定すると、通常のorgリンクを使って [[&amp;lt;name&amp;gt;]] で参照できる。デフォルトでは、参照時に番号のみ表示されるが、Code 2のように変数を設定すると識別子まで展開することができる。
(setq org-blackfriday--org-element-string &amp;#39;((src-block . &amp;#34;Code&amp;#34;) (table . &amp;#34;表&amp;#34;) (figure . &amp;#34;Figure&amp;#34;))) Code 1: 識別子名の設定 また、Code 1のように識別子のカスタマイズも可能だ。他にも識別子を変更する方法がある。それは、言語設定をすることだ。ファイルのトップに #+language: jp のように記述すると、識別子がその言語で翻訳されて出力される。Code 2のように明示的に設定していた場合、自動翻訳は実施されない。</description></item></channel></rss>