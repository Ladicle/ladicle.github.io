<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo on Ladicle</title><link>https://ladicle.com/tags/hugo/</link><description>Recent content in hugo on Ladicle</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 23 Jun 2020 14:59:00 +0900</lastBuildDate><atom:link href="https://ladicle.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>HugoでもTwitterCard画像を自動生成したい</title><link>https://ladicle.com/post/20200623_164459/</link><pubDate>Tue, 23 Jun 2020 14:59:00 +0900</pubDate><guid>https://ladicle.com/post/20200623_164459/</guid><description>Table of Contents どう生成するか考える GoでTwitterCardを生成する カスタマイズのしやすさ フォント、禁則処理、座標計算 etc. 更新のあった記事を対象に生成する HugoにTwitterCard(&amp;amp;OGP)情報を設定する キャッシュ対策 最近、Twitterを眺めているとイイ感じのサムネが設定されたブログ記事を見かけるようになった。 OGP1やTwitterCardl2にはそのような生成機能が無いので各々画像を生成しているのだと思われるが、 Hugoにもそのような機能は無い。ということで、この土日にGoで画像生成するコマンドを書いた。
どう生成するか考える Hugoは静的サイトジェネレータなので、一般的なブログサービスのように動的なことは考えず、 単純にサイト生成時に画像も生成すれば良いだろう。
では、どう生成すべきか？ImageMagicを使う方法や、Hugoでサムネ用ページを生成しそれをCode 1のように Headless Chrome を使ってスクショを撮る方法が考えられる。しかし、サムネをスクショするだけに起動するには少々重い。
docker run --rm -u $(id -u $USER) --cap-add=SYS_ADMIN --name capture -v $PWD:/workdir -w /workdir \ justinribeiro/chrome-headless \ --window-size=1200,628 \ --headless \ --disable-gpu \ --screenshot http://path.to/capture/target Code 1: Headless Chromeを使ってスクリーンショットを生成する例 このサイトを生成しているGitHub Actionでも動くような、軽量でポータブルなものが欲しい。 ということで、GoでHugoの記事からサムネ画像生成するCLIを作ることにした。</description></item><item><title>ox-Hugo Cheat Sheet</title><link>https://ladicle.com/post/ox-hugo-cheat/</link><pubDate>Wed, 16 Jan 2019 14:51:27 +0900</pubDate><guid>https://ladicle.com/post/ox-hugo-cheat/</guid><description>.ox-hugo-toc ul { list-style: none; } Table of Contents 1 図、表、コードの導入と参照 1.1 図のAMP対応 1.2 Chromaによるシンタックスハイライト 2 Subtreeのプロパティと各種機能 [50%] 2.1 TODO DraftフラグをTODOタグで切り替える 2.2 DONE プロパティによる目次とHUGOの制御 3 文字スタイルとHTML 3.1 Markdownに変換されるスタイル一覧 3.2 引用する 3.3 HTMLの制御とNoteブロックの追加 3.4 リスト一覧 4 LaTex数式を埋め込む 5 org-babelによるコードブロックの評価 5.1 Graphviz, PlantUML, ditaaを使ったの出力 5.2 R x ggplot2 によるSVG形式のグラフ出力 6 参考文献 1 図、表、コードの導入と参照 画像や、テーブルはキャプションを付けたり、Code 1のように参照することができる。参照したい名前を #+NAME: &amp;lt;name&amp;gt; に設定すると、通常のorgリンクを使って [[&amp;lt;name&amp;gt;]] で参照できる。デフォルトでは、参照時に番号のみ表示されるが、Code 2のように変数を設定すると識別子まで展開することができる。</description></item><item><title>Supporting AMP for Hugo templates</title><link>https://ladicle.com/post/support-amp/</link><pubDate>Wed, 06 Jun 2018 19:41:39 +0900</pubDate><guid>https://ladicle.com/post/support-amp/</guid><description>Istio v0.8がリリースされたので更新内容についての記事を書こうとしていたら，いつのまにかテンプレートのAMP対応をしていた．
作業の流れ ざっと公式ページを見る ひたすら使えないタグやjsをampに対応したものに置き換える chromeのアドレスバーに#development=1を追加してconsoleにvalidation errorが出ていないかチェック ひたすら直す 変えたポイント amp用の識別子たちを追加 cssファイルをconvertしてhtmlに吐き出し jsを全て取り払う hilightjsはgist pluginに変更 menuはsidebar, accordion pluginに変更 jump to top buttonはanimation, position pluginに変更 disqusをiframeに変更 (まだ表示されない原因が分からない imgタグをamp-imgに変換 所感 テンプレは3つだけなので，思っていたよりは楽だった．しかしページ数が多かったり，jsを使ったスタイリッシュなサイトは辛そうだなという感じ．表示は以前より大幅に早くなったのでしあわせ．ページごとのmeta情報の生成は面倒でやっていない．
references https://www.ampproject.org/ https://www.ampstart.com</description></item></channel></rss>