<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Exception();</title>
    <link>//ladicle.github.io/categories/tips/</link>
    <description>Recent content in Tips on Exception();</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Fri, 05 Aug 2016 16:43:31 +0900</lastBuildDate>
    
	<atom:link href="//ladicle.github.io/categories/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugoで記事と固定ページを書く</title>
      <link>//ladicle.github.io/post/write-post-by-hugo/</link>
      <pubDate>Fri, 05 Aug 2016 16:43:31 +0900</pubDate>
      
      <guid>//ladicle.github.io/post/write-post-by-hugo/</guid>
      <description>前回は、Hugoのインストール方法とテーマの変更方法について説明した。 今回は記事の作成と配信方法について解説する。
記事を書く 記事の作成には、前回作成したレポジトリのルートでnewコマンドを使う。
$ hugo new post/&amp;lt;post-title&amp;gt;.md  実行すると、content/postディレクトリに&amp;lt;post-title&amp;gt;.mdが作成されている。
$ cat content/post +++ date = &amp;quot;2016-08-05T07:48:33+09:00&amp;quot; description = &amp;quot;&amp;quot; title = &amp;quot;test&amp;quot; +++  この時、draftオプションをつけてserverを起動させると、 リアルタイムに編集内容を確認することができる。
$ hugo server -builDrafts  記事をサクッと作成する hugoコマンドはレポジトリのルートでしか動かないが、 書きたいことを思いついた時レポジトリルートにいるとは限らないので、 このようなスクリプトを.zshrcに登録している。
function blog() { postPath=/Users/ladicle/Develop/src/github.com/Ladicle/blog/content/post if [ $# -eq 0 ]; then BLOG_FILES=$(ag -l &#39;draft = true&#39; $postPath) elif [ $1 = &#39;-p&#39; ]; then BLOG_FILES=$(ag -l &#39;draft = false&#39; $postPath) elif [ $1 = &#39;-a&#39; ]; then BLOG_FILES=$(\ls $postPath) else cat&amp;lt;&amp;lt;EOF &amp;gt; $postPath/$1.</description>
    </item>
    
    <item>
      <title>Kindle Unlimitedの技術本</title>
      <link>//ladicle.github.io/post/kindle-unlimited/</link>
      <pubDate>Wed, 03 Aug 2016 12:33:51 +0900</pubDate>
      
      <guid>//ladicle.github.io/post/kindle-unlimited/</guid>
      <description> Kindle Unlimitedが今日から開始した。
持っている本や良みたかった本が登録されていたのでまとめてみた。
Technology        
 オンラインジャッジではじめるC/C++プログラミング入門 : 読みたい プログラミングコンテスト・チャレンジブック : パズルとして楽しめる Write Portable Code : 読みたい Code Craft : 読みたい 世界で闘うプログラミング力を鍛える150問 : よい本。コーディング面接に最適 :) 30日でできる! OS自作入門 : 学生のときに読んだ。ただしフロッピーなのでここら辺参照 プログラミングコンテスト攻略のためのアルゴリズムとデータ構造: 読みたい アジャイルな見積もりと計画づくり : ザッとでも読むと感覚がわかる  Others 
 ウトライン・プロセッシング入門 : 後で読む  所感  実際に読まれたページ数に対応した金額が著者に支払われるようだが
揉めそうな予感しかない。
 </description>
    </item>
    
    <item>
      <title>Pull RequestテンプレートでPRの品質を保つ</title>
      <link>//ladicle.github.io/post/add-github-templates/</link>
      <pubDate>Tue, 02 Aug 2016 15:19:34 +0900</pubDate>
      
      <guid>//ladicle.github.io/post/add-github-templates/</guid>
      <description> GitHubにContribution Guideの表示やPull Requestのテンプレートを導入してから RPの品質やレビューの水準が一定に保たれたと感じている。
Pull Requestのテンプレートを追加する 2016年の2月からGitHubがテンプレート機能をサポートした。(黒魔術なスクリプトは不要!) 使い方は簡単で、レポジトリのroot、又は.github/ディレクトリにPULL_REQUEST_TEMPLATE.mdを配置するだけだ。
現在は以下のようなテンプレートを使用している。
$ cat .github/PULL_REQUEST_TEMPLATE.md ## Ticket * https://[jira-host]/[ticket-id] ## Changes * ## Check lists * [ ] XXXの時はYYYを行う * [ ] 上記に該当しないため不要  PRのブランチ名にはJIRAのチケット番号を入れているため目的やReviewerの指定は省略した。 重点的にRVしてほしいポイントのみ記述する方式だ。 また、どうしても自動化できないタスクはチェックリストにして実施漏れを防いでいる。
 Note
* IssueのテンプレートもISSUE_TEMPLATE.mdで作成できる
* 拡張子は.mdや.txt、.org等READMEと同じくだいたい使える
 Contribution Guideを表示する Contribution GuideはCONTRIBUTING.mdファイルをレポジトリに配置するだけだ。 PR作成時、以下のようなリンクが表示されるようになる。
 Note
* CONTRIBUTION.mdはルートに配置する方が見られる機会が増えるので良いと思う
* 同じく拡張子は変更可能
 </description>
    </item>
    
  </channel>
</rss>