<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Study on Exception();</title>
    <link>//ladicle.github.io/tags/study/</link>
    <description>Recent content in Study on Exception();</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Thu, 11 Aug 2016 23:39:14 +0900</lastBuildDate>
    
	<atom:link href="//ladicle.github.io/tags/study/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkins勉強会#9で発表してきた</title>
      <link>//ladicle.github.io/post/jenkins-study9/</link>
      <pubDate>Thu, 11 Aug 2016 23:39:14 +0900</pubDate>
      
      <guid>//ladicle.github.io/post/jenkins-study9/</guid>
      <description> コンテナCIとJobの管理方法について話してきた。
話した内容や質問された内容を補足する。
スライドはこちら。
 コンテナCIの流れ ありがちではあるが、以下の通り。
 GitHubへ変更内容をPush or PRのコメント欄にtest this pleaseと記述 上記のイベントをトリガとしてJenkinsのJobが実行 試験内容はJenkinsではなく、Kubernetes上のコンテナで実行 試験結果をSlackに通知する  環境構成  図は、分かりやすさを優先してだいぶ省略している
 試験の目的は、OpenStackの1コンポーネントに対して入れた修正の動作確認。 そのため、他のコンポーネントについては基本修正が入らない。 修正が行われるコンポーネントのみコンテナ化して、他のものはVM上に固定で作っている。 これは、コンテナ化には初期コスト&amp;amp;起動時間を回避するためだ。
 VMはOpenStackのNovaで作ったものなので、OpenStack上に試験用OpenStackがいる
 Job構成 ITとUTは並列して走るようになっており、
どちらかの試験がコケた段階でもう一方の試験も停止して結果を返す。
また、コンテナの後片付けは試験の開始時に行っている。 試験の最後にコンテナを片付けてしまうと、 試験に失敗した時の解析ができなくなってしまうためである。
Job管理 チームでは、Jenkins Job Builder(略してJJB)というYAML(/JSON)でJobを定義できるものを使用している。 Jenkinsの2.0がオススメしているJenkinsfileを使えばGitでJobを管理できるが、 昔のPluginを全て捨てPiplineに移行するのは大変であるし、 Jenkinsfileの指定には結局GUIが必要になってしまう。 しかし、JJBなら全てをCLI上で完結することができる。
YAMLのキーはJenkinsJob設定のXMLファイルと要素がほぼ一致しているので、 Jenkinsに慣れている人であれば、すぐに書けるようになると思う。
Jobの反映フロー  JJBのDocument or Code参照しつつYAMLを書く 適用して動作を見る GitHubのPRをつくる メンバーにレビューしてもらう Mergeされる Mergeイベントを契機に、Jenkinsが自身に対してMasterのJob定義を反映する  </description>
    </item>
    
    <item>
      <title>Golang 1.7 release party in Tokyo</title>
      <link>//ladicle.github.io/post/golang1.7-release-party/</link>
      <pubDate>Mon, 08 Aug 2016 19:48:11 +0900</pubDate>
      
      <guid>//ladicle.github.io/post/golang1.7-release-party/</guid>
      <description>補欠だったので無理かと思っていたら、当日繰り上がった。 イベントページはこちら
1. What&amp;rsquo;s new Go1.7? by @deeeet Golang1.7、残念ながらRelease表明されなかった(1.6の時以来2回目)
2. Release note points  MacOS Sierraをサポート Linkerが速くなった(特にk8sのような大規模のコードへの恩恵は大きい) StackFrameが入り、LinuxのProfilerが使えるようになった -Xオプションをつけると、key=valueでつなげないものはエラーになる vendoring optionが使えなくなった // go-binary-only-packageを付けるとバイナリだけを提供できるようになった 標準パッケージは以下のようなものが変更された(他にもあるよ)  context: 今まで標準ではなかった testing: subtestとbenchmarkが作成できる http tracing: httpリクエストの各ステップにフック関数の挿入が可能に    所感
HTTP tracingデバッグとチューニングにとても便利そう
 3. About contribution of Go by @stanaka  GolangへのContribution方法(前回のGoConと同じ!) まずはContribution Guidlineをよむ GitHubではなくGerritを使う(FIX, DONEなコンパクトなコメントを返せる)   所感
未だにGerrit慣れないが、コメントボタンよさそう
 4. context package by @ono_matope スライドはこちら
 1.7に標準パッケージに入ったが2014年にはPJが始まっていた 様々なライブラリのキャンセル要求インタフェースの標準か  ここら辺参照: このへんにキャンセルの話とか書いてある ▶ Go Concurrency Patterns: Pipelines and cancellation - The Go Blog https://t.</description>
    </item>
    
  </channel>
</rss>