<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on Exception();</title>
    <link>//ladicle.github.io/tags/container/</link>
    <description>Recent content in Container on Exception();</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Thu, 11 Aug 2016 23:39:14 +0900</lastBuildDate>
    
	<atom:link href="//ladicle.github.io/tags/container/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkins勉強会#9で発表してきた</title>
      <link>//ladicle.github.io/post/jenkins-study9/</link>
      <pubDate>Thu, 11 Aug 2016 23:39:14 +0900</pubDate>
      
      <guid>//ladicle.github.io/post/jenkins-study9/</guid>
      <description> コンテナCIとJobの管理方法について話してきた。
話した内容や質問された内容を補足する。
スライドはこちら。
 コンテナCIの流れ ありがちではあるが、以下の通り。
 GitHubへ変更内容をPush or PRのコメント欄にtest this pleaseと記述 上記のイベントをトリガとしてJenkinsのJobが実行 試験内容はJenkinsではなく、Kubernetes上のコンテナで実行 試験結果をSlackに通知する  環境構成  図は、分かりやすさを優先してだいぶ省略している
 試験の目的は、OpenStackの1コンポーネントに対して入れた修正の動作確認。 そのため、他のコンポーネントについては基本修正が入らない。 修正が行われるコンポーネントのみコンテナ化して、他のものはVM上に固定で作っている。 これは、コンテナ化には初期コスト&amp;amp;起動時間を回避するためだ。
 VMはOpenStackのNovaで作ったものなので、OpenStack上に試験用OpenStackがいる
 Job構成 ITとUTは並列して走るようになっており、
どちらかの試験がコケた段階でもう一方の試験も停止して結果を返す。
また、コンテナの後片付けは試験の開始時に行っている。 試験の最後にコンテナを片付けてしまうと、 試験に失敗した時の解析ができなくなってしまうためである。
Job管理 チームでは、Jenkins Job Builder(略してJJB)というYAML(/JSON)でJobを定義できるものを使用している。 Jenkinsの2.0がオススメしているJenkinsfileを使えばGitでJobを管理できるが、 昔のPluginを全て捨てPiplineに移行するのは大変であるし、 Jenkinsfileの指定には結局GUIが必要になってしまう。 しかし、JJBなら全てをCLI上で完結することができる。
YAMLのキーはJenkinsJob設定のXMLファイルと要素がほぼ一致しているので、 Jenkinsに慣れている人であれば、すぐに書けるようになると思う。
Jobの反映フロー  JJBのDocument or Code参照しつつYAMLを書く 適用して動作を見る GitHubのPRをつくる メンバーにレビューしてもらう Mergeされる Mergeイベントを契機に、Jenkinsが自身に対してMasterのJob定義を反映する  </description>
    </item>
    
    <item>
      <title>コンテナとDockerについて思うこと</title>
      <link>//ladicle.github.io/post/docker-left-oci/</link>
      <pubDate>Mon, 01 Aug 2016 21:52:39 +0900</pubDate>
      
      <guid>//ladicle.github.io/post/docker-left-oci/</guid>
      <description> ガチャピン先生のDocker、OCIやめるってよの記事が話題だったので、 コンテナとDockerについて思ったことを書いてみる。
コンテナ = Dockerか? Dockerによってコンテナが多くの人に使われるようになったのは確かだ。
しかし、コンテナ = Dockerか? という訳ではないと思う。
単純なコンテナの利点の利用&amp;mdash;
例えば、『コンテナ化して各アプリケーションを隔離したい。』と思った時、 DockerはLinuxコンテナの技術を複雑に組み合わせたDockerはオーバースキルであることが多い。
Dockerのよさ Dockerによってコンテナが流行(?)した理由として以下のようなものが考えられる。
  技術の隠蔽化 DockerHubの存在   Linuxコンテナ技術自体は昔から利用されていたが、 これらが統合されてDockerという形でラッピングされたことによって、 アプリケーションレイヤのエンジニアにとっても使いやすいものとなった。
また、DockerHubはDockerが流行に一躍をかっている。 様々なアプリケーションがDockerHubに登録されたことによって、 今までコンテナというものに触れたことがなかった人でも
$ docker run nginx  という簡単なコマンドだけで
『コンテナという技術によって簡単にアプリケーションが立ちがる』
という体験ができる。
(brewやaptのようなパッケージマネージャのように)
参考になる  こういう文脈で I agreeではじまってるときは、たいていagreeしてない
 </description>
    </item>
    
  </channel>
</rss>